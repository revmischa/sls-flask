version: 2.1

executors:
  # define our execution environment
  py-exec:
    docker:
      - image: circleci/python:3.7.1
        environment:
          PIPENV_VENV_IN_PROJECT: true
          TEST_DATABASE_URL: postgresql://postgres@localhost/circle_test?sslmode=disable
      - image: circleci/postgres:11-alpine-postgis
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: circle
    working_directory: ~/pybuild
  python-node:
    working_directory: ~/pynode
    docker:
      - image: jetbridge/ci-python37-node10

workflows:
  version: 2
  build_and_test:
    jobs:
      - checkout_code_build_test
      - deps:
          requires:
            - checkout_code_build_test
      - tests:
          requires:
            - deps
      - lint:
          requires:
            - deps
      - type_checks:
          requires:
            - deps
  deployment:
    # prepare deployment environment with python + nodejs + serverless
    # not master branch: test deployment to a brand new environment then tear it down
    # master branch: deploy to the "dev" stage (optional)
    jobs:
      - checkout_code_deployment
      - create_deployment_environment:
          requires:
            - checkout_code_deployment
      - package_deployment:
          requires:
            - create_deployment_environment
      # uncomment to deploy to test stack on each commit not on master
      # - test_deploy:
      #     requires:
      #       - package_deployment
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - staging
      #           - prod
      # # uncomment to auto-deploy master branch to dev stage
      # - deploy_dev:
      #     requires:
      #       - package_deployment
      #     filters:
      #       branches:
      #         only:
      #           - master

jobs:
  # git clone
  checkout_code_build_test:
    executor: py-exec
    working_directory: ~/pybuild
    steps:
      - checkout
      - save_cache:
          key: v1-pybuild-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/pybuild

  # run pipenv install and save the .venv dir
  deps:
    executor: py-exec
    steps:
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          key: v1-pybuild-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-dep-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          command: |
            sudo pip install pipenv
            pipenv install --deploy --dev
      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
          key: v1-dep-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/pybuild

  # pytest
  tests:
    executor: py-exec
    steps:
      - restore_cache:
          key: v1-dep-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          command: |
            mkdir test-reports
            pipenv run pytest --junitxml=test-reports/junit.xml
      - store_test_results:
          path: test-reports

  # mypy
  type_checks:
    executor: py-exec
    steps:
      - restore_cache:
          key: v1-dep-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          command: |
            pipenv run mypy .

  # flake8
  lint:
    executor: py-exec
    steps:
      - restore_cache:
          key: v1-dep-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          command: |
            pipenv run flake8

  # DEPLOYMENT:
  checkout_code_deployment:
    executor: python-node
    working_directory: ~/pynode
    steps:
      - checkout
      - save_cache:
          key: v1-deploy-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/pynode

  create_deployment_environment:
    # prepare serverless environment
    executor: python-node
    steps:
      - restore_cache:
          key: v1-deploy-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-deploy-deps-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install serverless plugins
          command: |
            npm install --no-save
      - save_cache:
          key: v1-deploy-deps-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/pynode
            # - /usr/local/lib/node_modules
  package_deployment:
    # package serverless application for deployment
    executor: python-node
    steps:
      - restore_cache:
          key: v1-deploy-deps-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Lock pipfile
          command: pipenv lock --requirements
      - run:
          name: Serverless package
          command: AWS_PROFILE= sls package --stage test-${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM} --package slspkg.zip
      - save_cache:
          key: v1-deploy-slspkg-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - slspkg.zip
  test_deploy:
    executor: python-node
    steps:
      - restore_cache:
          key: v1-deploy-deps-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-deploy-slspkg-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Serverless deploy (test-${CIRCLE_BRANCH}-${CIRCLE_SHA1})
          command: AWS_PROFILE= sls deploy --package slspkg.zip --stage test-${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
      - run:
          name: Initialize DB
          command: AWS_PROFILE= sls invoke -f initDb --stage test-${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
      - run:
          name: Seed DB
          command: AWS_PROFILE= sls invoke -f seed --stage test-${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
      - run:
          name: Wait on stack success or failure
          command: |
            # aws cloudformation wait stack-create-complete --stack-id
      - run:
          name: Remove test CloudFormation stack
          command: AWS_PROFILE= sls remove --stage test-${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
          when: always  # always remove stack when we're done
  deploy_dev:
    executor: python-node
    steps:
      - restore_cache:
          key: v1-deploy-deps-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-deploy-slspkg-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Serverles deploy (dev)
          command: AWS_PROFILE= sls deploy --package slspkg.zip --stage test-${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
      - run:
          name: Initialize DB
          command: AWS_PROFILE= sls invoke -f initDb --stage test-${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
      - run:
          name: Seed DB
          command: AWS_PROFILE= sls invoke -f seed --stage test-${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
